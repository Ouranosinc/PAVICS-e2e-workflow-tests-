#!/bin/sh

. ./default_build_params

# Load shared functions, make available to CONFIG_PARAMETERS_SCRIPT_URL.
DOWNLOADREPOS_AS_LIB=1
. ./downloadrepos

set -x

# emulate "clean after checkout" of single branch pipeline
git clean -fdx

# Allow full override of ALL Jenkins params before running test suite.
# Intended to overrride all params in Jenkinsfile.
#
# This `CONFIG_PARAMETERS_SCRIPT_URL` is different than the
# `CONFIG_OVERRIDE_SCRIPT_URL` in that it overrides all the
# Jenkins params much sooner so all regular processing can take place.
#
# When the regular processing are not enough and we need additional
# customizations, then we use the other `CONFIG_OVERRIDE_SCRIPT_URL`.
#
# The two override scripts complement each other by hooking into the
# process at different moment in time, and together they allow full
# complete override of the various options for the test run.
#
# Furthermore, CONFIG_OVERRIDE_SCRIPT_URL can also be a local file that is
# created on the fly by CONFIG_PARAMETERS_SCRIPT_URL.  So in the end, only
# CONFIG_PARAMETERS_SCRIPT_URL is needed for a full complete override.
# See example in test-override/jenkins-params-raven-specific-nb.include.sh.
if [ -n "$CONFIG_PARAMETERS_SCRIPT_URL" ]; then
    TMP_PARAMS_OVERRIDE="/tmp/jenkins_params_override"
    rm -vf "$TMP_PARAMS_OVERRIDE"

    # Use tee to log content of override script for traceability.
    curl --silent "$CONFIG_PARAMETERS_SCRIPT_URL" | tee "$TMP_PARAMS_OVERRIDE"

    # Source script so it can alter ALL existing variables in the current context.
    . "$TMP_PARAMS_OVERRIDE"
fi

# download all additional repos containing extra notebooks to test
DOWNLOAD_ALL_DEFAULT_REPOS=false
downloadrepos_main

# 'export' useful vars so they can be used by the CONFIG_OVERRIDE_SCRIPT_URL in runtest.
export PAVICS_SDI_BRANCH="$(sanitize_branch_name "$PAVICS_SDI_BRANCH")"
export PAVICS_SDI_REPO_NAME="$(extract_repo_name "$PAVICS_SDI_REPO")"
export FINCH_BRANCH="$(sanitize_branch_name "$FINCH_BRANCH")"
export FINCH_REPO_NAME="$(extract_repo_name "$FINCH_REPO")"
export PAVICS_LANDING_BRANCH="$(sanitize_branch_name "$PAVICS_LANDING_BRANCH")"
export PAVICS_LANDING_REPO_NAME="$(extract_repo_name "$PAVICS_LANDING_REPO")"
export RAVEN_BRANCH="$(sanitize_branch_name "$RAVEN_BRANCH")"
export RAVEN_REPO_NAME="$(extract_repo_name "$RAVEN_REPO")"
export RAVENPY_BRANCH="$(sanitize_branch_name "$RAVENPY_BRANCH")"
export RAVENPY_REPO_NAME="$(extract_repo_name "$RAVENPY_REPO")"
export ESGF_COMPUTE_API_BRANCH="$(sanitize_branch_name "$ESGF_COMPUTE_API_BRANCH")"
export ESGF_COMPUTE_API_REPO_NAME="$(extract_repo_name "$ESGF_COMPUTE_API_REPO")"

export PAVICS_SDI_DIR="$(sanitize_extracted_folder_name "${PAVICS_SDI_REPO_NAME}-${PAVICS_SDI_BRANCH}")"
export FINCH_DIR="$(sanitize_extracted_folder_name "${FINCH_REPO_NAME}-${FINCH_BRANCH}")"
export PAVICS_LANDING_DIR="$(sanitize_extracted_folder_name "${PAVICS_LANDING_REPO_NAME}-${PAVICS_LANDING_BRANCH}")"
export RAVEN_DIR="$(sanitize_extracted_folder_name "${RAVEN_REPO_NAME}-${RAVEN_BRANCH}")"
export RAVENPY_DIR="$(sanitize_extracted_folder_name "${RAVENPY_REPO_NAME}-${RAVENPY_BRANCH}")"
export ESGF_COMPUTE_API_DIR="$(sanitize_extracted_folder_name "${ESGF_COMPUTE_API_REPO_NAME}-${ESGF_COMPUTE_API_BRANCH}")"

# lowercase VERIFY_SSL string
VERIFY_SSL="$(lowercase "$VERIFY_SSL")"
if [ x"$VERIFY_SSL" = xfalse ]; then
    # if Env var DISABLE_VERIFY_SSL is present, notebook should disable ssl
    # cert verification
    # in notebook use:
    # verify_ssl = True if 'DISABLE_VERIFY_SSL' not in os.environ else False
    export DISABLE_VERIFY_SSL=1
    echo "setting env var DISABLE_VERIFY_SSL for notebooks"
fi


NOTEBOOKS_TO_TEST=""
if [ x"$TEST_MAGPIE_AUTH" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST notebooks-auth/*.ipynb"
fi
if [ x"$TEST_PAVICS_SDI_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${PAVICS_SDI_DIR}/docs/source/notebooks/*.ipynb"
    if [ x"$TEST_PAVICS_SDI_WEAVER" = xtrue ]; then
        NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${PAVICS_SDI_DIR}/docs/source/notebook-components/*weaver*.ipynb"
    fi
fi
if [ x"$TEST_FINCH_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${FINCH_DIR}/docs/source/notebooks/*.ipynb"
fi

if [ x"$TEST_PAVICS_LANDING_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${PAVICS_LANDING_DIR}/content/notebooks/climate_indicators/*.ipynb"
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${PAVICS_LANDING_DIR}/content/notebooks/hydrology/*.ipynb"

    SETUP_SCRIPT="${PAVICS_LANDING_DIR}/content/notebooks/climate_indicators/setup_dirlayout.sh"
    if [ -x "$SETUP_SCRIPT" ]; then

        # Delegate extra files layout setup to source repo so this setup_dirlayout.sh
        # becomes a stable interface between this repo and the source repo.
        # Any future layout changes will be seemless for this repo.

        $SETUP_SCRIPT
    fi
fi

if [ x"$TEST_RAVEN_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${RAVEN_DIR}/docs/source/notebooks/*.ipynb"
fi
if [ x"$TEST_RAVENPY_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${RAVENPY_DIR}/docs/notebooks/*.ipynb"
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${RAVENPY_DIR}/docs/notebooks/paper/*.ipynb"
fi
if [ x"$TEST_ESGF_COMPUTE_API_REPO" = xtrue ]; then
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST ${ESGF_COMPUTE_API_DIR}/examples/*.ipynb"
fi

if [ x"$TEST_LOCAL_NOTEBOOKS" = xtrue ]; then
    # Add notebooks here last since stress-test.ipynb can possible cause cascading
    # damage to other notebooks.
    NOTEBOOKS_TO_TEST="$NOTEBOOKS_TO_TEST notebooks/*.ipynb"
fi

# last notebooks higher chance for name clash
./runtest "$NOTEBOOKS_TO_TEST"
EXIT_CODE="$?"


### Save conda env details for manual reproducibility outside of docker image.

ENV_DUMP_DIR="buildout/env-dump"
mkdir -p $ENV_DUMP_DIR

ENV_EXPORT_FILE="$ENV_DUMP_DIR/environment-export-birdy.yml"
rm -fv $ENV_EXPORT_FILE
conda env export -n birdy > $ENV_EXPORT_FILE

LIST_EXPLICIT_FILE="$ENV_DUMP_DIR/conda-list-explicit-birdy.txt"
rm -fv $LIST_EXPLICIT_FILE
conda list -n birdy --explicit > $LIST_EXPLICIT_FILE

PIP_FREEZE_FILE="$ENV_DUMP_DIR/pip-freeze-birdy-requirements.txt"
rm -fv $PIP_FREEZE_FILE
pip freeze > $PIP_FREEZE_FILE


# exit with runtest exit code
exit $EXIT_CODE
